name: R-Type CI/CD
run-name: R-Type Build and Test

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-CPP-500-MLH-5-1-rtype-hugo.bardet.git"

on:
  push:
    branches-ignore:
      - "ga-ignore**"
  pull_request:
    branches-ignore:
      - "ga-ignore**"

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache vcpkg
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ./vcpkg
            ~/.cache/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Install vcpkg
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Verify vcpkg installation
        run: |
          if [ -d "./vcpkg" ]; then
            echo "vcpkg directory exists"
            ls -la ./vcpkg
          else
            echo "vcpkg directory does not exist"
          fi
          if [ -f "./vcpkg/vcpkg" ]; then
            echo "vcpkg executable exists"
          else
            echo "vcpkg executable does not exist"
          fi

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: dep-cache
        with:
          path: ~/.cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/packages.txt') }}

      - name: Install Dependencies
        if: steps.dep-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential \
            libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config \
            libglfw3-dev libgl1-mesa-dev
          mkdir -p ~/.cache/apt
          sudo cp -R /var/cache/apt/archives ~/.cache/apt
          sudo chown -R $USER:$USER ~/.cache/apt

  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore vcpkg cache
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg
            ~/.cache/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Restore Dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/packages.txt') }}

      - name: Build Project
        run: |
          echo "./vcpkg/scripts/buildsystems/vcpkg.cmake" > .vcpkg_path
          chmod +x build.sh
          ./build.sh Init
          ./build.sh Release
          ./build.sh Build

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/R-Type/R-Type/lib
            /home/runner/work/R-Type/R-Type/r-type_client
            /home/runner/work/R-Type/R-Type/r-type_server
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Check Binaries
        run: |
          if [ ! -f "/home/runner/work/R-Type/R-Type/lib/libr-type.a" ]; then
            echo "r-type.a not found"
            exit 1
          fi
          if [ ! -f "/home/runner/work/R-Type/R-Type/r-type_client" ]; then
            echo "r-type_client not found"
            exit 1
          fi
          if [ ! -f "/home/runner/work/R-Type/R-Type/r-type_server" ]; then
            echo "r-type_server not found"
            exit 1
          fi
          echo "All required binaries are present"

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/R-Type/R-Type/lib
            /home/runner/work/R-Type/R-Type/r-type_client
            /home/runner/work/R-Type/R-Type/r-type_server
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Run Tests
        run: |
          ./build.sh Test

  push_to_mirror:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{env.MIRROR_URL}}
          ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
