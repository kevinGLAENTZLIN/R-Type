name: R-Type CI/CD
run-name: R-Type Build and Test

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-CPP-500-MLH-5-1-rtype-hugo.bardet.git"

on:
  push:
    branches-ignore:
      - "ga-ignore**"
  pull_request:
    branches-ignore:
      - "ga-ignore**"

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    outputs:
      apt-cache-hit: ${{ steps.cache-apt.outputs.cache-hit }}
      vcpkg-cache-hit: ${{ steps.cache-vcpkg.outputs.cache-hit }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get APT cache directory
        id: apt-cache-dir
        run: echo "::set-output name=dir::$(apt-config dump | grep Dir::Cache::archives | cut -d ' ' -f 2)"

      - name: Cache vcpkg dependencies
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg dependencies
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install

  build:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Apt Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

      - name: Restore vcpkg cache
        uses: actions/cache@v3
        with:
          path: vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Setup vcpkg
        run: ./build.sh setup_vcpkg

      - name: Initialize Project
        run: ./build.sh init

      - name: Configure Release
        run: ./build.sh release

      - name: Build Project
        run: ./build.sh build

      - name: Check Binaries
        run: |
          if [ ! -f "/home/runner/work/R-Type/R-Type/lib/libr-type.a" ]; then
            echo "r-type.a not found"
            exit 1
          fi
          if [ ! -f "/home/runner/work/R-Type/R-Type/r-type_client" ]; then
            echo "r-type_client not found"
            exit 1
          fi
          if [ ! -f "/home/runner/work/R-Type/R-Type/r-type_server" ]; then
            echo "r-type_server not found"
            exit 1
          fi
          echo "All required binaries are present"

      - name: Run Tests
        run: ./build.sh test

  push_to_mirror:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Post GitHub Action URL
        run: |
          echo "GitHub Action URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
