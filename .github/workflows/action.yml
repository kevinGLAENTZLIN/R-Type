name: R-Type CI/CD
run-name: R-Type Build and Test

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-CPP-500-MLH-5-1-rtype-hugo.bardet.git"

on:
  push:
    branches-ignore:
      - "ga-ignore**"
  pull_request:
    branches-ignore:
      - "ga-ignore**"

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential \
            libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config \
            libglfw3-dev libgl1-mesa-dev ninja-build

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: "2023.11.20"
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"

      - name: Cache vcpkg packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: Check Binaries
        run: |
          if [ ! -f "${{github.workspace}}/build/lib/libr-type.a" ]; then
            echo "r-type.a not found"
            exit 1
          fi
          if [ ! -f "${{github.workspace}}/build/r-type_client" ]; then
            echo "r-type_client not found"
            exit 1
          fi
          if [ ! -f "${{github.workspace}}/build/r-type_server" ]; then
            echo "r-type_server not found"
            exit 1
          fi
          echo "All required binaries are present"

      - name: Run Tests
        run: |
          cd ${{github.workspace}}/build
          ctest -C Release --output-on-failure

  push_to_mirror:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{env.MIRROR_URL}}
          ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
