name: Build and Release

on:
  push:
    branches: [RTY-120-deploy]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up CMake
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            sudo apt-get update
            sudo apt-get install -y cmake
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            brew update
            brew install cmake
          elif [ ${{ matrix.os }} == 'windows-latest' ]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          fi

      - name: Install vcpkg on Windows
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg integrate install

      - name: Configure CMake
        run: |
          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
          else
            cmake -S . -B build
          fi

      - name: Build application
        run: cmake --build build --config Release

      - name: Archive production artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: zip -j linux_app.zip build/your_executable

      - name: Archive production artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: zip -j macos_app.zip build/your_executable

      - name: Archive production artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path build/your_executable.exe -DestinationPath windows_app.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_app
          path: |
            linux_app.zip
            macos_app.zip
            windows_app.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest_app
          path: ./artifacts/linux_app.zip

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-latest_app
          path: ./artifacts/macos_app.zip

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-latest_app
          path: ./artifacts/windows_app.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changelog:
            - Feature 1
            - Feature 2
          draft: false
          prerelease: false

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux_app.zip
          asset_name: linux_app.zip
          asset_content_type: application/zip

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos_app.zip
          asset_name: macos_app.zip
          asset_content_type: application/zip

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows_app.zip
          asset_name: windows_app.zip
          asset_content_type: application/zip
